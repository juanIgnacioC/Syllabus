INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('2', 'Es capaz de dar ejemplos que ilustren la compensación que debe existir entre tiempo y espacio para los algoritmos ', 'Saber Ser', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('3', 'Reproduce la definición formal de la notación O-grande ', 'Saber Ser', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('4', 'Lista y contrasta clases de complejidad estándar ', 'Saber Ser', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('5', 'Determina de manera informal la complejidad de tiempo y espacio de algoritmos simples', 'Saber Ser', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('6', 'Conoce las estrategias de diseño de algoritmos Fuerza bruta, codicioso, dividir para conquistar y programación dinámica', 'Saber', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('7', 'Identifica ejemplos prácticos en los que se puede aplicar cada una de las estrategias (fuerza bruta, codicioso, dividir para conquistar, backtracking y programación dinámica) de diseño de algoritmos', 'Saber', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('8', 'Conoce la estrategia de diseño backtracking', 'Saber', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('9', 'Utiliza una estrategia de dividir para conquistar para resolver un problema apropiado', 'Saber', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('10', 'Utiliza backtracking para la resolución de problemas tales como la navegación de un laberinto', 'Saber', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('11', 'Utiliza programación dinámica para resolver un problema apropiado', 'Saber', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('12', 'Conoce la sintaxis básica de un lenguaje de programación', 'Saber Hacer', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('13', 'Discute sobre el tiempo de ejecución y eficiencia en memoria de los principales algoritmos de ordenamiento, búsqueda y hash', 'Saber Hacer', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('14', 'Discute sobre factores distintos a la eficiencia computacional que influyen en la elección de un algoritmo, tales como el tiempo de programación, mantención y el uso de patrones de aplicación específicos en los datos de entrada', 'Saber Hacer', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('15', 'Implementa algoritmos numéricos básicos', 'Saber Hacer', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('16', 'Implementa algoritmos de búsqueda secuencial y explica sus diferencias en términos de complejidad', 'Saber Hacer', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('17', 'Implementa algoritmos de búsqueda binaria y explica sus diferencias en términos de complejidad', 'Saber Hacer', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('18', 'Implementa algoritmos de ordenamiento tradicionales de orden cuadrático y O(N log N). ', 'Saber Hacer', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('19', 'Describe el proceso de implementación de tablas de hash, incluyendo aspectos de resolución y manejo de colisiones', 'Saber', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('20', 'Explica como el balance afecta la eficiencia de varias operaciones en árboles de búsqueda binaria', 'Saber', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('21', 'Describe la propiedad de heap y el uso de heaps como una implementación de colas de prioridad', 'Saber', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('22', 'Discute el concepto de máquinas de estado finito', 'Saber', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('23', 'Diseña una máquina de estado finito determinista que acepte un lenguaje específico', 'Saber', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('24', 'Genera una expresión regular que represente un lenguaje específico', 'Saber', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('25', 'Explica por qué el “halting problem” no tiene solución algorítmica', 'Saber Ser', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('26', 'Define las clases P y NP', 'Saber Ser', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('27', 'Explica la significancia de la NP-Completitud', 'Saber Ser', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('28', 'Describe la progresión de los componentes tecnológicos en computación, desde los tubos de vacío hasta los circuitos VLSI (very large scale integration, 10); desde las arquitecturas mainframe a la organización de computadores en escala de warehouse', 'Saber', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('29', 'Comprende la tendencia en las arquitecturas computacionales modernas hacia los múltiples cores y que el paralelismo es inherente a todos los sistemas de hardware', 'Saber', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('30', 'Expresa la existencia de múltiples representaciones equivalentes de funcionalidades computacionales, las que incluyen las expresiones y compuertas lógicas, y es capaz de usar expresiones matemáticas para la descripción de circuitos combinatoriales y secuenciales simples', 'Saber', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('31', 'Explica por qué en los computadores, todo es datos, incluyendo las instrucciones', 'Saber Hacer', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('32', 'Explica las razones para usar formatos alternativos en la representación de datos numéricos', 'Saber Hacer', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('33', 'Describe cómo los enteros negativos son almacenados en representaciones de magnitud-signo y complemento a 2', 'Saber Hacer', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('34', 'Convierte datos numéricos entre formatos', 'Saber Hacer', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('35', 'Explica la organización de la máquina clásica de von Neumann y sus principales unidades funcionales', 'Saber Ser', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('36', 'Resume cómo las instrucciones son representadas tanto a nivel de máquina y en el contexto de un ensamblador simbólico', 'Saber Hacer', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('37', 'Identifica las principales tecnologías de memoria (ej. SRAM, DRAM, Flash, discos magnéticos) y sus relativos costos y rendimientos', 'Saber Ser', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('38', 'Calcula el tiempo promedio de acceso a memoria bajo distintas configuraciones de memoria y cache y combinaciones de referencias a instrucciones y datos', 'Saber Ser', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('39', 'Explica como las interrupciones son utilizadas para implementar control de E/S y transferencias de datos', 'Saber Ser', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('40', 'Compara organizaciones de redes comunes, tales como Ethernet/bus, anillo, switched vs. routed', 'Saber Ser', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('41', 'Explica mediante ejemplos la terminología básica de las funciones, relaciones y conjuntos', 'Saber Hacer', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('42', 'Describe las fortalezas y limitaciones de la lógica proposicional y de predicado', 'Saber Hacer', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('43', 'Convierte afirmaciones lógicas expresadas en lenguaje informal a expresiones en lógica proposicional y de predicado', 'Saber', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('44', 'Conoce las técnicas de demostración: prueba directa, contradicción e inducción', 'Saber Ser', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('45', 'Detalla la estructura básica de cada técnica de demostración (prueba directa, prueba por contradicción e inducción). ', 'Saber Hacer', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('46', 'Conoce técnicas de conteo básicas', 'Saber Ser', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('47', 'Conoce las relaciones de recurrencia', 'Saber', 'Habilitado', 10);
INSERT INTO Saber(codigo, descripcion, nivelLogro, estado, porcentajeLogro) VALUES('48', 'Ilustra con ejemplos la terminología básica de la teoría de grafos, como también algunas de las propiedades y casos especiales de cada tipo de grafo/árbol (Árboles, grafos no dirigidos, grafos dirigidos y grafos con pesos)', 'Saber', 'Habilitado', 10);